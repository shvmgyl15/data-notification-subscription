server:
  port: 8010
subscriptionmanager:
  disableHttpOptionsMethod: true
  subscription:
    defaultPageSize: ${DEFAULT_PAGE_SIZE}
    maxPageSize: ${MAX_PAGE_SIZE}
    purposeOfUseDefUrl: classpath:/static/ValueSet/purpose-of-use.json
    hiTypesDefUrl: classpath:/static/ValueSet/health-info-type.json
    subscriptionRequestExpiry: ${SUBSCRIPTION_REQUEST_EXPIRY:720}
  db:
    host: ${POSTGRES_HOST}
    port: ${POSTGRES_PORT:5432}
    schema: ${CONSENT_MANAGER_DB_NAME}
    user: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    poolSize: ${MASTER_POOL_SIZE:5}
    replica-read-enabled: {REPLICA_READ_ENABLED:false}
    replica:
      host: ${REPLICA_POSTGRES_HOST}
      port: ${REPLICA_POSTGRES_PORT:5432}
      user: ${REPLICA_POSTGRES_USER}
      password: ${REPLICA_POSTGRES_PASSWORD}
      poolSize: ${REPLICA_POOL_SIZE:3}
  keycloak:
    baseUrl: ${KEY_CLOAK_URL}
    clientId: ${KEY_CLOAK_CONSENT_CLIENT_ID}
    clientSecret: ${KEY_CLOAK_CONSENT_CLIENT_SECRET}
    userName: ${KEY_CLOAK_CONSENT_USER_NAME}
    password: ${KEY_CLOAK_CONSENT_PASSWORD}
    jwkUrl:  ${KEY_CLOAK_JWK_URL}
    issuer: ${KEY_CLOAK_TOKEN_ISSUER}
  gatewayservice:
    baseUrl: ${GATEWAY_BASE_URL}
    requestTimeout: ${GATEWAY_REQUEST_TIMEOUT}
    clientSecret: ${GATEWAY_CLIENT_SECRET}
    clientId: ${GATEWAY_CLIENT_ID}
    jwkUrl: ${CENTRAL_REGISTRY_JWK_URL}
  authorization:
    header: ${AUTHORIZATION_HEADER:Authorization}
    externalIDPForUserAuth: ${EXTERNAL_IDP_FOR_USER_AUTH:false}
    idpCertPath: ${IDP_CERT_PATH}
    idpClientId : ${IDP_CLIENT_ID}
    idpClientSecret : ${IDP_SECRET}
    idpAuthURL : ${IDP_AUTH_URL}
  cacheMethod: ${CACHE_METHOD:guava}
  redis:
    #Will not be used if cacheMethod is guava
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:password}
    keep-alive-enabled: ${KEEP_ALIVE_ENABLED:false}
    retry: ${REDIS_RETRY:0}
  userservice:
    url: ${User_Service_Url}
    userIdSuffix: ${USER_ID_SUFFIX}
  linkservice:
    url: ${LINK_SERVICE_URL}
spring:
  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: true
      kafka:
        binder:
          brokers: ${KAFKA_URL:http://13.71.113.65:9092}
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
            value.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
#            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
            value.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
#            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
            specific.avro.reader: true
            max.poll.records: 20
            session.timeout.ms: 6000
            max.poll.interval.ms: 2400000
      bindings:
        input-binding:
          destination: cm-hip-link-queue
          group: cm-hip-link-group-01
          contentType: application/json
        producer-binding:
          destination: test-queue-01
          contentType: application/json
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
logging:
  level:
    ROOT: ${LOG_LEVEL:INFO}
webclient:
  use-connection-pool: ${USE_HTTP_CONNECTION_POOL:true}
  connection-pool:
    poolSize: ${HTTP_CONNECTION_POOL_SIZE:500}
    maxLifeTime: ${HTTP_CONNECTION_MAX_LIFETIME:10}
    maxIdleTimeout: ${HTTP_CONNECTION_MAX_IDLETIME:5}